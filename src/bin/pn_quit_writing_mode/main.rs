use dbus::blocking::Connection;
use std::error::Error;
use std::time::Duration;
/* auto-generated code start:*/
// This code was autogenerated with `dbus-codegen-rust --system-bus -d org.pinenote.ebc -p /ebc`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusProperties for blocking::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }
}

pub trait OrgPinenoteEbc {
    fn enter_writing_mode(&self) -> Result<(), dbus::Error>;
    fn get_autorefresh(&self) -> Result<bool, dbus::Error>;
    fn get_bw_mode(&self) -> Result<u8, dbus::Error>;
    fn get_dclk_select(&self) -> Result<u8, dbus::Error>;
    fn get_default_waveform(&self) -> Result<u8, dbus::Error>;
    fn get_no_off_screen(&self) -> Result<u8, dbus::Error>;
    fn quit_writing_mode(&self) -> Result<(), dbus::Error>;
    fn request_quality_or_performance_mode(&self, mode_request: u8) -> Result<(), dbus::Error>;
    fn set_auto_refresh(&self, state: bool) -> Result<(), dbus::Error>;
    fn set_bw_mode(&self, new_mode: u8) -> Result<(), dbus::Error>;
    fn set_dclk_select(&self, state: u8) -> Result<(), dbus::Error>;
    fn set_default_waveform(&self, waveform: u8) -> Result<(), dbus::Error>;
    fn set_ebcparameters(&self, default_waveform: u8, bw_mode: u8) -> Result<(), dbus::Error>;
    fn set_no_off_screen(&self, new_mode: u8) -> Result<(), dbus::Error>;
    fn trigger_global_refresh(&self) -> Result<(), dbus::Error>;
    fn default_waveform(&self) -> Result<u8, dbus::Error>;
    fn setdefault_waveform(&self, value: u8) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgPinenoteEbcBwModeChanged {
}

impl arg::AppendAll for OrgPinenoteEbcBwModeChanged {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgPinenoteEbcBwModeChanged {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgPinenoteEbcBwModeChanged {
        })
    }
}

impl dbus::message::SignalArgs for OrgPinenoteEbcBwModeChanged {
    const NAME: &'static str = "BwModeChanged";
    const INTERFACE: &'static str = "org.pinenote.ebc";
}

#[derive(Debug)]
pub struct OrgPinenoteEbcNoOffScreenChanged {
}

impl arg::AppendAll for OrgPinenoteEbcNoOffScreenChanged {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgPinenoteEbcNoOffScreenChanged {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgPinenoteEbcNoOffScreenChanged {
        })
    }
}

impl dbus::message::SignalArgs for OrgPinenoteEbcNoOffScreenChanged {
    const NAME: &'static str = "NoOffScreenChanged";
    const INTERFACE: &'static str = "org.pinenote.ebc";
}

#[derive(Debug)]
pub struct OrgPinenoteEbcReqQualityOrPerformance {
    pub requested_mode: u8,
}

impl arg::AppendAll for OrgPinenoteEbcReqQualityOrPerformance {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.requested_mode, i);
    }
}

impl arg::ReadAll for OrgPinenoteEbcReqQualityOrPerformance {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgPinenoteEbcReqQualityOrPerformance {
            requested_mode: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgPinenoteEbcReqQualityOrPerformance {
    const NAME: &'static str = "ReqQualityOrPerformance";
    const INTERFACE: &'static str = "org.pinenote.ebc";
}

#[derive(Debug)]
pub struct OrgPinenoteEbcWaveformChanged {
}

impl arg::AppendAll for OrgPinenoteEbcWaveformChanged {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgPinenoteEbcWaveformChanged {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgPinenoteEbcWaveformChanged {
        })
    }
}

impl dbus::message::SignalArgs for OrgPinenoteEbcWaveformChanged {
    const NAME: &'static str = "WaveformChanged";
    const INTERFACE: &'static str = "org.pinenote.ebc";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgPinenoteEbc for blocking::Proxy<'a, C> {

    fn enter_writing_mode(&self) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "EnterWritingMode", ())
    }

    fn get_autorefresh(&self) -> Result<bool, dbus::Error> {
        self.method_call("org.pinenote.ebc", "GetAutorefresh", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn get_bw_mode(&self) -> Result<u8, dbus::Error> {
        self.method_call("org.pinenote.ebc", "GetBwMode", ())
            .and_then(|r: (u8, )| Ok(r.0, ))
    }

    fn get_dclk_select(&self) -> Result<u8, dbus::Error> {
        self.method_call("org.pinenote.ebc", "GetDclkSelect", ())
            .and_then(|r: (u8, )| Ok(r.0, ))
    }

    fn get_default_waveform(&self) -> Result<u8, dbus::Error> {
        self.method_call("org.pinenote.ebc", "GetDefaultWaveform", ())
            .and_then(|r: (u8, )| Ok(r.0, ))
    }

    fn get_no_off_screen(&self) -> Result<u8, dbus::Error> {
        self.method_call("org.pinenote.ebc", "GetNoOffScreen", ())
            .and_then(|r: (u8, )| Ok(r.0, ))
    }

    fn quit_writing_mode(&self) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "QuitWritingMode", ())
    }

    fn request_quality_or_performance_mode(&self, mode_request: u8) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "RequestQualityOrPerformanceMode", (mode_request, ))
    }

    fn set_auto_refresh(&self, state: bool) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "SetAutoRefresh", (state, ))
    }

    fn set_bw_mode(&self, new_mode: u8) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "SetBwMode", (new_mode, ))
    }

    fn set_dclk_select(&self, state: u8) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "SetDclkSelect", (state, ))
    }

    fn set_default_waveform(&self, waveform: u8) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "SetDefaultWaveform", (waveform, ))
    }

    fn set_ebcparameters(&self, default_waveform: u8, bw_mode: u8) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "SetEBCParameters", (default_waveform, bw_mode, ))
    }

    fn set_no_off_screen(&self, new_mode: u8) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "SetNoOffScreen", (new_mode, ))
    }

    fn trigger_global_refresh(&self) -> Result<(), dbus::Error> {
        self.method_call("org.pinenote.ebc", "TriggerGlobalRefresh", ())
    }

    fn default_waveform(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.pinenote.ebc", "default_waveform")
    }

    fn setdefault_waveform(&self, value: u8) -> Result<(), dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::set(self, "org.pinenote.ebc", "default_waveform", value)
    }
}
/* auto-generated code end:*/


fn main() -> Result<(), Box<dyn Error>>  {
 // Let's start by starting up a connection to the session bus.
    let c = Connection::new_system()?;

    {
        let proxy = c.with_proxy("org.pinenote.ebc", "/ebc", Duration::from_millis(5000));

        let _ = proxy.quit_writing_mode();
    }

    Ok(())
}
